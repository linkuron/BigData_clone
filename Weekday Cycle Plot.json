{"src":"{\"ownername\":\"plotdb\",\"key\":2081,\"name\":\"Weekday Cycle Plot\",\"owner\":4,\"theme\":null,\"parent\":1059,\"description\":\"a cycle plot, compare between different fields. This chart accepts general date and break them into week days automatically.\",\"basetype\":[\"2\"],\"visualencoding\":[\"1\",\"2\"],\"category\":[\"5\"],\"tags\":[\"cycle\",\"week\",\"revenue\",\"turnover\",\"traffic\",\"visitor\",\"month\",\"season\",\"sale\"],\"likes\":null,\"searchable\":true,\"dimlen\":2,\"createdtime\":\"2016-09-11T08:36:51.000Z\",\"modifiedtime\":\"2017-04-05T08:13:58.000Z\",\"doc\":{\"name\":\"document\",\"size\":0,\"type\":\"html\",\"lines\":1,\"content\":\"\"},\"style\":{\"name\":\"stylesheet\",\"size\":0,\"type\":\"css\",\"lines\":1,\"content\":\"\"},\"code\":{\"name\":\"code\",\"size\":8975,\"type\":\"javascript\",\"lines\":225,\"content\":\"{\\n  sample: function() {\\n    var list = d3.range(182).map(function(d,i) {\\n      return new Date(new Date().getTime() - 86400 * 1000 * 365 + d * 86400 * 1000);\\n    });\\n    return {\\n      order: [{name: \\\"Date\\\", data: list.map(function(d) {\\n        return moment(d).format(\\\"YYYY/MM/DD\\\");\\n      })}],\\n      value: [{name: \\\"Value\\\", data: list.map(function(d) {\\n        var m = d.getMonth();\\n        var d = d.getDay();\\n        return Math.sin(m) * 10 + Math.sin(d) * 100 + Math.random() * 10;\\n      })}]\\n    };\\n  },\\n  dimension: {\\n    value: { type: [plotdb.Number], require: true, desc: \\\"Y axis\\\" },\\n    order: { type: [plotdb.Order], require: false, desc: \\\"X axis\\\" }\\n  },\\n  config: {\\n    fontSize: {},\\n    margin: {},\\n    padding: {},\\n    xAxisLabel: {},\\n    yAxisLabel: {},\\n    nodeShow: {},\\n    stroke: { name: \\\"Line Color\\\" },\\n    start: { name: \\\"Start Node\\\", type: [plotdb.Color], default: \\\"#ee4422\\\"},\\n    other: { name: \\\"Middle Nodes\\\", type: [plotdb.Color], default: \\\"#dddddd\\\"},\\n    end: { name: \\\"End Node\\\", type: [plotdb.Color], default: \\\"#999999\\\"},\\n  },\\n  init: function() {\\n    var that = this;\\n    this.svg = d3.select(this.root).append(\\\"svg\\\");\\n    this.dataGroup = this.svg.append(\\\"g\\\").attr({class: \\\"data-group\\\"});\\n    this.yAxisGroup = this.svg.append(\\\"g\\\").attr({class: \\\"axis vertical\\\"});\\n    this.xAxisGroup = this.svg.append(\\\"g\\\").attr({class: \\\"axis horizontal\\\"});\\n    this.gridGroup = this.svg.append(\\\"g\\\").attr({class: \\\"grid-group\\\"});\\n    this.legendGroup = this.svg.append(\\\"g\\\").attr({class: \\\"legend-group\\\"});\\n    this.trend = this.svg.append(\\\"path\\\").attr({class: \\\"overall\\\",opacity: 0.1}).on(\\\"mouseover\\\", function() {\\n      that.activeGroup = 1; that.render();\\n    }).on(\\\"mouseout\\\", function() {\\n      that.activeGroup = null; that.render();\\n    });\\n    this.valueRange = [0,1];\\n  },\\n  parse: function() {\\n    var that = this;\\n    plotdb.Order.sort(this.data, \\\"order\\\");\\n    this.valueRange = d3.extent(this.data, function(d,i) { return d.value; });\\n    //this.valueRange = d3.extent(this.data.map(function(it) { return d3.extent(it.value); }).reduce(function(a,b) { return a.concat(b); }, []));\\n    this.orders = this.data.map(function(d,i) { return d.order.raw; });\\n    this.groupSize = 7;//this.dimension.value.fields.length;\\n    this.parsed = d3.range(7).map(function(d) { return {order: d, value: [], mean: 0}; });\\n    this.data.map(function(it) {\\n      var d = new Date(it.order.raw).getDay();\\n      var node = that.parsed[d];\\n      node.value.push(it.value);\\n    });\\n    this.parsed.map(function(d,i) {\\n      d.mean = d3.mean(d.value);\\n    });\\n    if(this.valueRange[0] == this.valueRange[1]) this.valueRange[1]++;\\n    var d = this.valueRange[1] - this.valueRange[0];\\n    this.valueRange[1] += d * 0.1;\\n    this.valueRange[0] -= d * 0.1;\\n  },\\n  bind: function() {\\n    var that = this, sel;\\n    sel = this.dataGroup.selectAll(\\\"g.data-group\\\").data(this.parsed);\\n    sel.exit().remove();\\n    sel.enter().append(\\\"g\\\").attr({class: \\\"data-group\\\"}).each(function(d,i) {\\n      var node = d3.select(this);\\n      if(i == 0) node.append(\\\"text\\\").text(\\\"avg.\\\");\\n      node.append(\\\"rect\\\").attr({class: \\\"background\\\"});\\n      node.append(\\\"path\\\").attr({class: \\\"connect\\\"});\\n      node.append(\\\"line\\\").attr({class: \\\"mean\\\"});\\n      node.selectAll(\\\"circle\\\").data(d.value)\\n          .enter().append(\\\"circle\\\").attr({class: \\\"node\\\"});\\n    });\\n    this.dataGroup.selectAll(\\\"g.data-group\\\").each(function(d,i) {\\n      var node = d3.select(this);\\n      node.select(\\\"rect\\\").datum(d);\\n      node.select(\\\"path\\\").datum(d);\\n      node.select(\\\"line\\\").datum(d);\\n    });\\n  },\\n  resize: function() {\\n    var that = this;\\n    var box = this.root.getBoundingClientRect();\\n    var width = this.width = box.width;\\n    var height = this.height = box.height - 10;\\n    this.xAxisHeight = 3 * this.config.fontSize;\\n    this.yAxisWidth = 10 * this.config.fontSize;\\n    this.blockWidth = ( width - 2 * this.config.margin - this.yAxisWidth ) / (this.parsed.length || 1);\\n    this.svg.attr({\\n      width: width + \\\"px\\\", height: height + \\\"px\\\",\\n      viewBox: [0,0,width,height].join(\\\" \\\"),\\n      preserveAspectRatio: \\\"xMidYMid\\\"\\n    });\\n    this.legendScale = d3.scale.ordinal()\\n      .domain([\\\"start\\\",\\\"end\\\"])\\n      .range([this.config.start, this.config.end]);\\n    this.legend = plotd3.rwd.legend()\\n      .scale(this.legendScale)\\n      .orient(\\\"bottom\\\")\\n      .fontSize(this.config.fontSize);\\n    this.legendGroup.call(this.legend);\\n    this.legendSize = this.legend.offset();\\n    this.yScale = d3.scale.linear()\\n      .domain(this.valueRange)\\n      .range([this.height - this.config.margin - this.legendSize[1], this.config.margin]);\\n    this.yAxis = plotd3.rwd.axis()\\n      .orient(\\\"left\\\")\\n      .scale(this.yScale)\\n      .labelPosition(\\\"center\\\")\\n      .fontSize(this.config.fontSize);\\n    this.yAxis.label(this.config.yAxisLabel || \\\" \\\");\\n    this.yAxisGroup.call(this.yAxis);\\n    this.yAxisWidth = this.yAxis.offset();\\n    this.xScale = d3.scale.ordinal()\\n      .domain(d3.range(7)) //this.orders)\\n      .rangeBands([this.config.margin + this.yAxisWidth, this.width - this.config.margin], 0.25, 0.25);\\n    this.xAxis = plotd3.rwd.axis()\\n      .orient(\\\"bottom\\\")\\n      .scale(this.xScale)\\n      //.tickValues(this.orders)\\n      .labelPosition(\\\"in\\\")\\n      .tickFormat(function(d,i) {\\n        return [\\\"Sun\\\",\\\"Mon\\\",\\\"Tue\\\",\\\"Wed\\\",\\\"Thr\\\",\\\"Fri\\\",\\\"Sat\\\"][d];\\n      })\\n      .fontSize(this.config.fontSize);\\n    this.xAxis.label(this.config.xAxisLabel || this.dimension.order.fieldName || \\\" \\\");\\n    this.xAxisGroup.call(this.xAxis);\\n    this.xAxisHeight = this.xAxis.offset();\\n    this.yScale.range([this.height - this.config.margin - this.xAxisHeight - this.legendSize[1], this.config.margin]);\\n    this.yAxisGroup.call(this.yAxis);\\n    this.segWidth = this.xScale.rangeBand();\\n    this.xiScale = d3.scale.linear()\\n      .domain([0, this.parsed[0].value.length - 1])\\n      .range([0, this.segWidth]);\\n\\n    this.line = d3.svg.line().interpolate(\\\"linear\\\")\\n      .x(function(d,i) { return that.xiScale(i); })\\n      .y(function(it) {  return that.yScale(it);});\\n    this.area = d3.svg.area().interpolate(\\\"basis\\\")\\n      .x(function(d,i) { return that.xScale(d.order) + that.segWidth * i / (that.parsed[0].value.length + 1) - that.segWidth/2; })\\n      .y0(function(d,i) { return that.yScale(d3.min(d.value)); })\\n      .y1(function(d,i) { return that.yScale(d3.max(d.value)); });\\n  },\\n  render: function() {\\n    var that = this;\\n    this.legendGroup.attr({\\n      transform: [\\\"translate(\\\", (this.width - this.legendSize[0])/2, (this.height - this.config.margin - this.legendSize[1]), \\\")\\\"].join(\\\" \\\")\\n    });\\n    this.yAxisGroup.attr({\\n      transform: [\\\"translate(\\\", (this.yAxisWidth + this.config.margin), 0, \\\")\\\"].join(\\\" \\\")\\n    });\\n    this.xAxisGroup.attr({\\n      transform: [\\\"translate(\\\", 0, (this.height - this.xAxisHeight - this.config.margin - this.legendSize[1]), \\\")\\\"].join(\\\" \\\")\\n    });\\n    this.trend.attr({\\n      transform: \\\"translate(\\\" + (this.segWidth/2) + \\\" 0)\\\",\\n      d: function() { return that.area(that.data); },\\n      fill: \\\"black\\\",\\n    }).transition().attr({\\n      opacity: function() { return (that.activeGroup ? 0.8 : 0.1) },\\n    });\\n    this.dataGroup.selectAll(\\\"g.data-group\\\").attr({\\n      transform: function(d,i) {\\n        return [\\\"translate(\\\", that.xScale(d.order), 0, \\\")\\\"].join(\\\" \\\")\\n      }\\n    }).each(function(d,i) {\\n      var node = d3.select(this);\\n      if(i==0) node.select(\\\"text\\\").attr({\\n        \\\"font-size\\\": that.config.fontSize,\\n        x: that.segWidth/2,\\n        y: that.yScale(d.mean) + that.config.fontSize * 0.3,\\n        \\\"text-anchor\\\": \\\"middle\\\"\\n      });\\n      node.select(\\\"rect.background\\\").attr({\\n        x: -that.segWidth * 0.125, y: that.config.margin,\\n        width: that.segWidth * 1.25,\\n        height: that.height - that.xAxisHeight - that.config.margin * 2 - that.legendSize[1],\\n        fill: \\\"#000\\\",\\n        opacity: function() { return (i % 2 ? 0 : 0.05); }\\n      });\\n      node.select(\\\"path\\\").attr({\\n        d: that.line(d.value),\\n        stroke: that.config.stroke,\\n        fill: \\\"none\\\"\\n      });\\n      node.select(\\\"line\\\").attr({\\n        x1: 0,\\n        y1: that.yScale(d.mean),\\n        x2: that.segWidth,\\n        y2: that.yScale(d.mean),\\n        stroke: \\\"#000\\\",\\n        opacity: 0.2,\\n        \\\"stroke-width\\\": 5\\n      });\\n      node.selectAll(\\\"circle.node\\\").attr({\\n        cx: function(d,i) { return that.xiScale(i) },\\n        cy: function(d,i) { return that.yScale(d) },\\n        r: function(it,i) {\\n          return (i==0 || i==d.value.length - 1 ? 4 : 3);\\n        },\\n        fill: function(it,i) {\\n          if(i==0) return that.config.start;\\n          if(i == d.value.length - 1) return that.config.end;\\n          return that.config.other;\\n        },\\n        stroke: that.config.stroke,\\n        \\\"stroke-width\\\": function(it,i) {\\n          return (i == 0 || i == d.value.length - 1 ? 2 : 1);\\n        },\\n        opacity: (that.config.nodeShow ? 1 : 0)\\n      });\\n    });\\n    this.dataGroup.transition().attr({\\n      opacity: function() { return that.activeGroup ? 0.3 : 1; }\\n    });\\n  }\\n}\"},\"assets\":[],\"dimension\":{\"order\":{\"desc\":\"X axis\",\"type\":[\"Order\"],\"fields\":[],\"require\":false,\"fieldName\":null},\"value\":{\"desc\":\"Y axis\",\"type\":[\"Number\"],\"fields\":[],\"require\":true,\"fieldName\":null}},\"config\":{\"end\":{\"name\":\"End Node\",\"type\":[{\"Gray\":\"#cccccc\",\"name\":\"Color\",\"Empty\":\"#ffffff\",\"level\":10,\"Neutral\":\"#cccccc\",\"default\":\"#dc4521\",\"subtype\":{\"neutral\":\"neutral\",\"negative\":\"negative\",\"positive\":\"positive\"},\"Negative\":\"#d93510\",\"Positive\":\"#3f7ab5\"}],\"value\":\"#999999\",\"default\":\"#999999\"},\"other\":{\"name\":\"Middle Nodes\",\"type\":[{\"Gray\":\"#cccccc\",\"name\":\"Color\",\"Empty\":\"#ffffff\",\"level\":10,\"Neutral\":\"#cccccc\",\"default\":\"#dc4521\",\"subtype\":{\"neutral\":\"neutral\",\"negative\":\"negative\",\"positive\":\"positive\"},\"Negative\":\"#d93510\",\"Positive\":\"#3f7ab5\"}],\"value\":\"#dddddd\",\"default\":\"#dddddd\"},\"start\":{\"name\":\"Start Node\",\"type\":[{\"Gray\":\"#cccccc\",\"name\":\"Color\",\"Empty\":\"#ffffff\",\"level\":10,\"Neutral\":\"#cccccc\",\"default\":\"#dc4521\",\"subtype\":{\"neutral\":\"neutral\",\"negative\":\"negative\",\"positive\":\"positive\"},\"Negative\":\"#d93510\",\"Positive\":\"#3f7ab5\"}],\"value\":\"#f94747\",\"default\":\"#ee4422\"},\"margin\":{\"max\":20,\"min\":0,\"name\":\"Margin\",\"type\":[{\"name\":\"Number\",\"level\":8,\"order\":{},\"default\":0,\"basetype\":[{\"name\":\"Numstring\",\"level\":6,\"order\":{},\"default\":\"\",\"basetype\":[{\"name\":\"Order\",\"level\":4,\"order\":{},\"basetype\":[{\"name\":\"String\",\"level\":2,\"default\":\"\",\"basetype\":[]}]}]}]}],\"value\":10,\"default\":10,\"category\":\"Global Settings\"},\"stroke\":{\"desc\":\"Stroke Color\",\"name\":\"Line Color\",\"type\":[{\"Gray\":\"#cccccc\",\"name\":\"Color\",\"Empty\":\"#ffffff\",\"level\":10,\"Neutral\":\"#cccccc\",\"default\":\"#dc4521\",\"subtype\":{\"neutral\":\"neutral\",\"negative\":\"negative\",\"positive\":\"positive\"},\"Negative\":\"#d93510\",\"Positive\":\"#3f7ab5\"}],\"value\":\"#8c8686\",\"default\":\"#999\",\"category\":\"Global Settings\"},\"padding\":{\"name\":\"Padding\",\"type\":[{\"name\":\"Number\",\"level\":8,\"order\":{},\"default\":0,\"basetype\":[{\"name\":\"Numstring\",\"level\":6,\"order\":{},\"default\":\"\",\"basetype\":[{\"name\":\"Order\",\"level\":4,\"order\":{},\"basetype\":[{\"name\":\"String\",\"level\":2,\"default\":\"\",\"basetype\":[]}]}]}]}],\"value\":10,\"default\":10,\"category\":\"Global Settings\"},\"fontSize\":{\"name\":\"Font Size\",\"type\":[{\"name\":\"Number\",\"level\":8,\"order\":{},\"default\":0,\"basetype\":[{\"name\":\"Numstring\",\"level\":6,\"order\":{},\"default\":\"\",\"basetype\":[{\"name\":\"Order\",\"level\":4,\"order\":{},\"basetype\":[{\"name\":\"String\",\"level\":2,\"default\":\"\",\"basetype\":[]}]}]}]}],\"value\":12,\"default\":13,\"category\":\"Global Settings\"},\"nodeShow\":{\"name\":\"Show Data Dot\",\"type\":[{\"name\":\"Boolean\",\"level\":8,\"order\":{},\"default\":true,\"basetype\":[{\"name\":\"Order\",\"level\":4,\"order\":{},\"basetype\":[{\"name\":\"String\",\"level\":2,\"default\":\"\",\"basetype\":[]}]}]}],\"value\":true,\"default\":true,\"category\":\"Dot\"},\"xAxisLabel\":{\"name\":\"Label\",\"type\":[{\"name\":\"String\",\"level\":2,\"default\":\"\",\"basetype\":[]}],\"value\":\"\",\"default\":\"\",\"category\":\"X Axis\"},\"yAxisLabel\":{\"name\":\"Label\",\"type\":[{\"name\":\"String\",\"level\":2,\"default\":\"\",\"basetype\":[]}],\"value\":\"\",\"default\":\"\",\"category\":\"Y Axis\"}},\"library\":[\"d3/3.5.12/min\",\"plotd3/0.1.0\",\"moment/2.14.1\"],\"local\":null,\"inherit\":[],\"metashow\":null,\"footer\":null}","obj":{"ownername":"plotdb","key":2081,"name":"Weekday Cycle Plot","owner":4,"theme":null,"parent":1059,"description":"a cycle plot, compare between different fields. This chart accepts general date and break them into week days automatically.","basetype":["2"],"visualencoding":["1","2"],"category":["5"],"tags":null,"likes":null,"searchable":true,"dimlen":2,"createdtime":"2016-09-11T08:36:51.000Z","modifiedtime":"2017-04-05T08:13:58.000Z","doc":{"name":"document","size":0,"type":"html","lines":1,"content":""},"style":{"name":"stylesheet","size":0,"type":"css","lines":1,"content":""},"code":{"name":"code","size":8975,"type":"javascript","lines":225,"content":"{\n  sample: function() {\n    var list = d3.range(182).map(function(d,i) {\n      return new Date(new Date().getTime() - 86400 * 1000 * 365 + d * 86400 * 1000);\n    });\n    return {\n      order: [{name: \"Date\", data: list.map(function(d) {\n        return moment(d).format(\"YYYY/MM/DD\");\n      })}],\n      value: [{name: \"Value\", data: list.map(function(d) {\n        var m = d.getMonth();\n        var d = d.getDay();\n        return Math.sin(m) * 10 + Math.sin(d) * 100 + Math.random() * 10;\n      })}]\n    };\n  },\n  dimension: {\n    value: { type: [plotdb.Number], require: true, desc: \"Y axis\" },\n    order: { type: [plotdb.Order], require: false, desc: \"X axis\" }\n  },\n  config: {\n    fontSize: {},\n    margin: {},\n    padding: {},\n    xAxisLabel: {},\n    yAxisLabel: {},\n    nodeShow: {},\n    stroke: { name: \"Line Color\" },\n    start: { name: \"Start Node\", type: [plotdb.Color], default: \"#ee4422\"},\n    other: { name: \"Middle Nodes\", type: [plotdb.Color], default: \"#dddddd\"},\n    end: { name: \"End Node\", type: [plotdb.Color], default: \"#999999\"},\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.dataGroup = this.svg.append(\"g\").attr({class: \"data-group\"});\n    this.yAxisGroup = this.svg.append(\"g\").attr({class: \"axis vertical\"});\n    this.xAxisGroup = this.svg.append(\"g\").attr({class: \"axis horizontal\"});\n    this.gridGroup = this.svg.append(\"g\").attr({class: \"grid-group\"});\n    this.legendGroup = this.svg.append(\"g\").attr({class: \"legend-group\"});\n    this.trend = this.svg.append(\"path\").attr({class: \"overall\",opacity: 0.1}).on(\"mouseover\", function() {\n      that.activeGroup = 1; that.render();\n    }).on(\"mouseout\", function() {\n      that.activeGroup = null; that.render();\n    });\n    this.valueRange = [0,1];\n  },\n  parse: function() {\n    var that = this;\n    plotdb.Order.sort(this.data, \"order\");\n    this.valueRange = d3.extent(this.data, function(d,i) { return d.value; });\n    //this.valueRange = d3.extent(this.data.map(function(it) { return d3.extent(it.value); }).reduce(function(a,b) { return a.concat(b); }, []));\n    this.orders = this.data.map(function(d,i) { return d.order.raw; });\n    this.groupSize = 7;//this.dimension.value.fields.length;\n    this.parsed = d3.range(7).map(function(d) { return {order: d, value: [], mean: 0}; });\n    this.data.map(function(it) {\n      var d = new Date(it.order.raw).getDay();\n      var node = that.parsed[d];\n      node.value.push(it.value);\n    });\n    this.parsed.map(function(d,i) {\n      d.mean = d3.mean(d.value);\n    });\n    if(this.valueRange[0] == this.valueRange[1]) this.valueRange[1]++;\n    var d = this.valueRange[1] - this.valueRange[0];\n    this.valueRange[1] += d * 0.1;\n    this.valueRange[0] -= d * 0.1;\n  },\n  bind: function() {\n    var that = this, sel;\n    sel = this.dataGroup.selectAll(\"g.data-group\").data(this.parsed);\n    sel.exit().remove();\n    sel.enter().append(\"g\").attr({class: \"data-group\"}).each(function(d,i) {\n      var node = d3.select(this);\n      if(i == 0) node.append(\"text\").text(\"avg.\");\n      node.append(\"rect\").attr({class: \"background\"});\n      node.append(\"path\").attr({class: \"connect\"});\n      node.append(\"line\").attr({class: \"mean\"});\n      node.selectAll(\"circle\").data(d.value)\n          .enter().append(\"circle\").attr({class: \"node\"});\n    });\n    this.dataGroup.selectAll(\"g.data-group\").each(function(d,i) {\n      var node = d3.select(this);\n      node.select(\"rect\").datum(d);\n      node.select(\"path\").datum(d);\n      node.select(\"line\").datum(d);\n    });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height - 10;\n    this.xAxisHeight = 3 * this.config.fontSize;\n    this.yAxisWidth = 10 * this.config.fontSize;\n    this.blockWidth = ( width - 2 * this.config.margin - this.yAxisWidth ) / (this.parsed.length || 1);\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.legendScale = d3.scale.ordinal()\n      .domain([\"start\",\"end\"])\n      .range([this.config.start, this.config.end]);\n    this.legend = plotd3.rwd.legend()\n      .scale(this.legendScale)\n      .orient(\"bottom\")\n      .fontSize(this.config.fontSize);\n    this.legendGroup.call(this.legend);\n    this.legendSize = this.legend.offset();\n    this.yScale = d3.scale.linear()\n      .domain(this.valueRange)\n      .range([this.height - this.config.margin - this.legendSize[1], this.config.margin]);\n    this.yAxis = plotd3.rwd.axis()\n      .orient(\"left\")\n      .scale(this.yScale)\n      .labelPosition(\"center\")\n      .fontSize(this.config.fontSize);\n    this.yAxis.label(this.config.yAxisLabel || \" \");\n    this.yAxisGroup.call(this.yAxis);\n    this.yAxisWidth = this.yAxis.offset();\n    this.xScale = d3.scale.ordinal()\n      .domain(d3.range(7)) //this.orders)\n      .rangeBands([this.config.margin + this.yAxisWidth, this.width - this.config.margin], 0.25, 0.25);\n    this.xAxis = plotd3.rwd.axis()\n      .orient(\"bottom\")\n      .scale(this.xScale)\n      //.tickValues(this.orders)\n      .labelPosition(\"in\")\n      .tickFormat(function(d,i) {\n        return [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thr\",\"Fri\",\"Sat\"][d];\n      })\n      .fontSize(this.config.fontSize);\n    this.xAxis.label(this.config.xAxisLabel || this.dimension.order.fieldName || \" \");\n    this.xAxisGroup.call(this.xAxis);\n    this.xAxisHeight = this.xAxis.offset();\n    this.yScale.range([this.height - this.config.margin - this.xAxisHeight - this.legendSize[1], this.config.margin]);\n    this.yAxisGroup.call(this.yAxis);\n    this.segWidth = this.xScale.rangeBand();\n    this.xiScale = d3.scale.linear()\n      .domain([0, this.parsed[0].value.length - 1])\n      .range([0, this.segWidth]);\n\n    this.line = d3.svg.line().interpolate(\"linear\")\n      .x(function(d,i) { return that.xiScale(i); })\n      .y(function(it) {  return that.yScale(it);});\n    this.area = d3.svg.area().interpolate(\"basis\")\n      .x(function(d,i) { return that.xScale(d.order) + that.segWidth * i / (that.parsed[0].value.length + 1) - that.segWidth/2; })\n      .y0(function(d,i) { return that.yScale(d3.min(d.value)); })\n      .y1(function(d,i) { return that.yScale(d3.max(d.value)); });\n  },\n  render: function() {\n    var that = this;\n    this.legendGroup.attr({\n      transform: [\"translate(\", (this.width - this.legendSize[0])/2, (this.height - this.config.margin - this.legendSize[1]), \")\"].join(\" \")\n    });\n    this.yAxisGroup.attr({\n      transform: [\"translate(\", (this.yAxisWidth + this.config.margin), 0, \")\"].join(\" \")\n    });\n    this.xAxisGroup.attr({\n      transform: [\"translate(\", 0, (this.height - this.xAxisHeight - this.config.margin - this.legendSize[1]), \")\"].join(\" \")\n    });\n    this.trend.attr({\n      transform: \"translate(\" + (this.segWidth/2) + \" 0)\",\n      d: function() { return that.area(that.data); },\n      fill: \"black\",\n    }).transition().attr({\n      opacity: function() { return (that.activeGroup ? 0.8 : 0.1) },\n    });\n    this.dataGroup.selectAll(\"g.data-group\").attr({\n      transform: function(d,i) {\n        return [\"translate(\", that.xScale(d.order), 0, \")\"].join(\" \")\n      }\n    }).each(function(d,i) {\n      var node = d3.select(this);\n      if(i==0) node.select(\"text\").attr({\n        \"font-size\": that.config.fontSize,\n        x: that.segWidth/2,\n        y: that.yScale(d.mean) + that.config.fontSize * 0.3,\n        \"text-anchor\": \"middle\"\n      });\n      node.select(\"rect.background\").attr({\n        x: -that.segWidth * 0.125, y: that.config.margin,\n        width: that.segWidth * 1.25,\n        height: that.height - that.xAxisHeight - that.config.margin * 2 - that.legendSize[1],\n        fill: \"#000\",\n        opacity: function() { return (i % 2 ? 0 : 0.05); }\n      });\n      node.select(\"path\").attr({\n        d: that.line(d.value),\n        stroke: that.config.stroke,\n        fill: \"none\"\n      });\n      node.select(\"line\").attr({\n        x1: 0,\n        y1: that.yScale(d.mean),\n        x2: that.segWidth,\n        y2: that.yScale(d.mean),\n        stroke: \"#000\",\n        opacity: 0.2,\n        \"stroke-width\": 5\n      });\n      node.selectAll(\"circle.node\").attr({\n        cx: function(d,i) { return that.xiScale(i) },\n        cy: function(d,i) { return that.yScale(d) },\n        r: function(it,i) {\n          return (i==0 || i==d.value.length - 1 ? 4 : 3);\n        },\n        fill: function(it,i) {\n          if(i==0) return that.config.start;\n          if(i == d.value.length - 1) return that.config.end;\n          return that.config.other;\n        },\n        stroke: that.config.stroke,\n        \"stroke-width\": function(it,i) {\n          return (i == 0 || i == d.value.length - 1 ? 2 : 1);\n        },\n        opacity: (that.config.nodeShow ? 1 : 0)\n      });\n    });\n    this.dataGroup.transition().attr({\n      opacity: function() { return that.activeGroup ? 0.3 : 1; }\n    });\n  }\n}"},"assets":[],"dimension":{"value":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"require":true,"desc":"Y axis","fields":[{"name":"Value","data":[-98.87915141283355,-37.378389819662985,-3.7544274287366965,84.15944684993657,85.40286525763901,9.033910558604902,-75.43867417492537,-97.09640317132879,-29.676672837699044,-2.02934164281365,79.7146832149493,89.84913311644637,11.713246490090146,-83.06247459512431,-98.89821037476622,-28.59564438517165,-2.4030391484502136,78.29084281691546,87.94218282687875,13.143945982408656,-75.89055625258516,-96.78029901274189,-28.65139807180799,-0.8878075190974286,77.63922565844877,84.89816522335433,13.101708147373687,-85.16380548649481,-97.89387751246004,-26.42351185292428,1.2052653850255357,82.62656665176046,95.43282459858928,11.388710498357048,-77.19085890855743,-89.49327057511567,-23.609822639050506,-1.0912769459455518,81.81990849885909,90.4813864523443,14.388383125716201,-68.50417533945915,-90.95880104637591,-30.408500025711025,-1.306366809665367,84.5486952117865,92.94833293428012,19.272882408829282,-71.14280382560922,-94.9195622847066,-29.759744566425596,2.0755218791962537,83.86072804317561,89.67437232245034,16.50804082368476,-71.14043476198526,-95.67066358349363,-25.54869396595017,4.910803288893197,92.9243021244047,106.75156854135706,29.65877772726982,-61.191398548144,-85.04333239216528,-14.483931071744419,8.23097943855121,91.96787256126014,105.25910593191743,23.442568415522384,-62.37442699934384,-79.43601600505092,-20.5165148403852,9.05559170340992,91.39587281846181,101.60351373430144,27.831149029761214,-62.49786436694061,-81.35162771998256,-12.959410406087162,14.052166655926296,96.01279647994755,103.01745350994437,21.56276867054209,-65.23650970002312,-88.14068250873132,-13.778129632953828,12.334841604045447,98.25362243786046,102.75544387243635,22.54416912447191,-63.07199208575753,-82.52110563694282,-11.306427249489278,19.02693281380086,101.66060391457937,106.67521710048618,30.76370836797968,-59.24674822040308,-85.80439447206544,-16.43698234505129,13.994280965391019,96.59310563475412,104.51427896561175,28.290075035935526,-63.54277726139442,-80.54779070346044,-15.676849341991765,19.83868621252886,94.63881316238648,105.21013563187675,27.420202111964237,-64.96919630155574,-79.44181979652453,-12.62897400021006,12.954961135992306,98.51136630638428,101.62978443506677,31.06019065557231,-59.50307271488309,-79.4468214263631,-15.734649629353646,10.076701466080763,93.45518114448856,100.42885624836227,26.806567955907852,-68.8438871921881,-87.24185373465852,-14.16899355537906,4.568517100008967,88.49563115021688,102.78359812511067,19.69000798775535,-70.4772841452595,-86.95954622788452,-17.684321043415576,9.508938605610902,88.55361787985717,101.4693486291504,19.715000604650292,-62.49890195943185,-89.69936453218749,-18.009063156652488,5.386695468655428,89.2287769585856,102.5538211070951,23.235779234035167,-69.91164646837922,-81.83728773407267,-17.304430297659977,13.71555652666233,90.37701104158245,92.33519841820896,9.061347275635626,-71.69457931994228,-92.8597776200015,-23.6991974646904,-2.5973344702220786,88.42818636203725,89.52257881823594,9.021171075519396,-80.19861586946955,-100.98584570985903,-24.462990481240325,3.5652924481000543,80.59562090351314,88.1205746629079,15.32914264607015,-75.0499367128974,-93.03512711273775,-28.699393796879253,-4.000976498843665,78.74218322349425,90.8078767565878,9.638702712830323,-80.77775961368556,-97.10004779472276,-29.51747616210398,-3.139231272971221,82.81293981513377,87.73890591048855,16.398461366755463,-80.78931086624448],"datatype":"Number","bind":"value"}],"fieldName":["Value"]},"order":{"type":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"require":false,"desc":"X axis","fields":[{"name":"Date","data":["2016/06/03","2016/06/04","2016/06/05","2016/06/06","2016/06/07","2016/06/08","2016/06/09","2016/06/10","2016/06/11","2016/06/12","2016/06/13","2016/06/14","2016/06/15","2016/06/16","2016/06/17","2016/06/18","2016/06/19","2016/06/20","2016/06/21","2016/06/22","2016/06/23","2016/06/24","2016/06/25","2016/06/26","2016/06/27","2016/06/28","2016/06/29","2016/06/30","2016/07/01","2016/07/02","2016/07/03","2016/07/04","2016/07/05","2016/07/06","2016/07/07","2016/07/08","2016/07/09","2016/07/10","2016/07/11","2016/07/12","2016/07/13","2016/07/14","2016/07/15","2016/07/16","2016/07/17","2016/07/18","2016/07/19","2016/07/20","2016/07/21","2016/07/22","2016/07/23","2016/07/24","2016/07/25","2016/07/26","2016/07/27","2016/07/28","2016/07/29","2016/07/30","2016/07/31","2016/08/01","2016/08/02","2016/08/03","2016/08/04","2016/08/05","2016/08/06","2016/08/07","2016/08/08","2016/08/09","2016/08/10","2016/08/11","2016/08/12","2016/08/13","2016/08/14","2016/08/15","2016/08/16","2016/08/17","2016/08/18","2016/08/19","2016/08/20","2016/08/21","2016/08/22","2016/08/23","2016/08/24","2016/08/25","2016/08/26","2016/08/27","2016/08/28","2016/08/29","2016/08/30","2016/08/31","2016/09/01","2016/09/02","2016/09/03","2016/09/04","2016/09/05","2016/09/06","2016/09/07","2016/09/08","2016/09/09","2016/09/10","2016/09/11","2016/09/12","2016/09/13","2016/09/14","2016/09/15","2016/09/16","2016/09/17","2016/09/18","2016/09/19","2016/09/20","2016/09/21","2016/09/22","2016/09/23","2016/09/24","2016/09/25","2016/09/26","2016/09/27","2016/09/28","2016/09/29","2016/09/30","2016/10/01","2016/10/02","2016/10/03","2016/10/04","2016/10/05","2016/10/06","2016/10/07","2016/10/08","2016/10/09","2016/10/10","2016/10/11","2016/10/12","2016/10/13","2016/10/14","2016/10/15","2016/10/16","2016/10/17","2016/10/18","2016/10/19","2016/10/20","2016/10/21","2016/10/22","2016/10/23","2016/10/24","2016/10/25","2016/10/26","2016/10/27","2016/10/28","2016/10/29","2016/10/30","2016/10/31","2016/11/01","2016/11/02","2016/11/03","2016/11/04","2016/11/05","2016/11/06","2016/11/07","2016/11/08","2016/11/09","2016/11/10","2016/11/11","2016/11/12","2016/11/13","2016/11/14","2016/11/15","2016/11/16","2016/11/17","2016/11/18","2016/11/19","2016/11/20","2016/11/21","2016/11/22","2016/11/23","2016/11/24","2016/11/25","2016/11/26","2016/11/27","2016/11/28","2016/11/29","2016/11/30","2016/12/01"],"datatype":"Date","bind":"order"}],"fieldName":["Date"]}},"config":{"end":{"name":"End Node","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#999999","default":"#999999"},"other":{"name":"Middle Nodes","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#dddddd","default":"#dddddd"},"start":{"name":"Start Node","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#f94747","default":"#ee4422"},"margin":{"max":20,"min":0,"name":"Margin","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":10,"default":10,"category":"Global Settings"},"stroke":{"desc":"Stroke Color","name":"Line Color","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#8c8686","default":"#999","category":"Global Settings"},"padding":{"name":"Padding","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":10,"default":10,"category":"Global Settings"},"fontSize":{"name":"Font Size","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":12,"default":13,"category":"Global Settings"},"nodeShow":{"name":"Show Data Dot","type":[{"name":"Boolean","level":8,"order":{},"default":true,"basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}],"value":true,"default":true,"category":"Dot"},"xAxisLabel":{"name":"Label","type":[{"name":"String","level":2,"default":"","basetype":[]}],"value":"","default":"","category":"X Axis"},"yAxisLabel":{"name":"Label","type":[{"name":"String","level":2,"default":"","basetype":[]}],"value":"","default":"","category":"Y Axis"}},"library":["d3/3.5.12/min","plotd3/0.1.0","moment/2.14.1"],"local":null,"inherit":null,"metashow":null,"footer":null},"dimension":{"value":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"require":true,"desc":"Y axis","fields":[{"name":"Value","data":[-98.87915141283355,-37.378389819662985,-3.7544274287366965,84.15944684993657,85.40286525763901,9.033910558604902,-75.43867417492537,-97.09640317132879,-29.676672837699044,-2.02934164281365,79.7146832149493,89.84913311644637,11.713246490090146,-83.06247459512431,-98.89821037476622,-28.59564438517165,-2.4030391484502136,78.29084281691546,87.94218282687875,13.143945982408656,-75.89055625258516,-96.78029901274189,-28.65139807180799,-0.8878075190974286,77.63922565844877,84.89816522335433,13.101708147373687,-85.16380548649481,-97.89387751246004,-26.42351185292428,1.2052653850255357,82.62656665176046,95.43282459858928,11.388710498357048,-77.19085890855743,-89.49327057511567,-23.609822639050506,-1.0912769459455518,81.81990849885909,90.4813864523443,14.388383125716201,-68.50417533945915,-90.95880104637591,-30.408500025711025,-1.306366809665367,84.5486952117865,92.94833293428012,19.272882408829282,-71.14280382560922,-94.9195622847066,-29.759744566425596,2.0755218791962537,83.86072804317561,89.67437232245034,16.50804082368476,-71.14043476198526,-95.67066358349363,-25.54869396595017,4.910803288893197,92.9243021244047,106.75156854135706,29.65877772726982,-61.191398548144,-85.04333239216528,-14.483931071744419,8.23097943855121,91.96787256126014,105.25910593191743,23.442568415522384,-62.37442699934384,-79.43601600505092,-20.5165148403852,9.05559170340992,91.39587281846181,101.60351373430144,27.831149029761214,-62.49786436694061,-81.35162771998256,-12.959410406087162,14.052166655926296,96.01279647994755,103.01745350994437,21.56276867054209,-65.23650970002312,-88.14068250873132,-13.778129632953828,12.334841604045447,98.25362243786046,102.75544387243635,22.54416912447191,-63.07199208575753,-82.52110563694282,-11.306427249489278,19.02693281380086,101.66060391457937,106.67521710048618,30.76370836797968,-59.24674822040308,-85.80439447206544,-16.43698234505129,13.994280965391019,96.59310563475412,104.51427896561175,28.290075035935526,-63.54277726139442,-80.54779070346044,-15.676849341991765,19.83868621252886,94.63881316238648,105.21013563187675,27.420202111964237,-64.96919630155574,-79.44181979652453,-12.62897400021006,12.954961135992306,98.51136630638428,101.62978443506677,31.06019065557231,-59.50307271488309,-79.4468214263631,-15.734649629353646,10.076701466080763,93.45518114448856,100.42885624836227,26.806567955907852,-68.8438871921881,-87.24185373465852,-14.16899355537906,4.568517100008967,88.49563115021688,102.78359812511067,19.69000798775535,-70.4772841452595,-86.95954622788452,-17.684321043415576,9.508938605610902,88.55361787985717,101.4693486291504,19.715000604650292,-62.49890195943185,-89.69936453218749,-18.009063156652488,5.386695468655428,89.2287769585856,102.5538211070951,23.235779234035167,-69.91164646837922,-81.83728773407267,-17.304430297659977,13.71555652666233,90.37701104158245,92.33519841820896,9.061347275635626,-71.69457931994228,-92.8597776200015,-23.6991974646904,-2.5973344702220786,88.42818636203725,89.52257881823594,9.021171075519396,-80.19861586946955,-100.98584570985903,-24.462990481240325,3.5652924481000543,80.59562090351314,88.1205746629079,15.32914264607015,-75.0499367128974,-93.03512711273775,-28.699393796879253,-4.000976498843665,78.74218322349425,90.8078767565878,9.638702712830323,-80.77775961368556,-97.10004779472276,-29.51747616210398,-3.139231272971221,82.81293981513377,87.73890591048855,16.398461366755463,-80.78931086624448],"datatype":"Number","bind":"value"}],"fieldName":["Value"]},"order":{"type":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"require":false,"desc":"X axis","fields":[{"name":"Date","data":["2016/06/03","2016/06/04","2016/06/05","2016/06/06","2016/06/07","2016/06/08","2016/06/09","2016/06/10","2016/06/11","2016/06/12","2016/06/13","2016/06/14","2016/06/15","2016/06/16","2016/06/17","2016/06/18","2016/06/19","2016/06/20","2016/06/21","2016/06/22","2016/06/23","2016/06/24","2016/06/25","2016/06/26","2016/06/27","2016/06/28","2016/06/29","2016/06/30","2016/07/01","2016/07/02","2016/07/03","2016/07/04","2016/07/05","2016/07/06","2016/07/07","2016/07/08","2016/07/09","2016/07/10","2016/07/11","2016/07/12","2016/07/13","2016/07/14","2016/07/15","2016/07/16","2016/07/17","2016/07/18","2016/07/19","2016/07/20","2016/07/21","2016/07/22","2016/07/23","2016/07/24","2016/07/25","2016/07/26","2016/07/27","2016/07/28","2016/07/29","2016/07/30","2016/07/31","2016/08/01","2016/08/02","2016/08/03","2016/08/04","2016/08/05","2016/08/06","2016/08/07","2016/08/08","2016/08/09","2016/08/10","2016/08/11","2016/08/12","2016/08/13","2016/08/14","2016/08/15","2016/08/16","2016/08/17","2016/08/18","2016/08/19","2016/08/20","2016/08/21","2016/08/22","2016/08/23","2016/08/24","2016/08/25","2016/08/26","2016/08/27","2016/08/28","2016/08/29","2016/08/30","2016/08/31","2016/09/01","2016/09/02","2016/09/03","2016/09/04","2016/09/05","2016/09/06","2016/09/07","2016/09/08","2016/09/09","2016/09/10","2016/09/11","2016/09/12","2016/09/13","2016/09/14","2016/09/15","2016/09/16","2016/09/17","2016/09/18","2016/09/19","2016/09/20","2016/09/21","2016/09/22","2016/09/23","2016/09/24","2016/09/25","2016/09/26","2016/09/27","2016/09/28","2016/09/29","2016/09/30","2016/10/01","2016/10/02","2016/10/03","2016/10/04","2016/10/05","2016/10/06","2016/10/07","2016/10/08","2016/10/09","2016/10/10","2016/10/11","2016/10/12","2016/10/13","2016/10/14","2016/10/15","2016/10/16","2016/10/17","2016/10/18","2016/10/19","2016/10/20","2016/10/21","2016/10/22","2016/10/23","2016/10/24","2016/10/25","2016/10/26","2016/10/27","2016/10/28","2016/10/29","2016/10/30","2016/10/31","2016/11/01","2016/11/02","2016/11/03","2016/11/04","2016/11/05","2016/11/06","2016/11/07","2016/11/08","2016/11/09","2016/11/10","2016/11/11","2016/11/12","2016/11/13","2016/11/14","2016/11/15","2016/11/16","2016/11/17","2016/11/18","2016/11/19","2016/11/20","2016/11/21","2016/11/22","2016/11/23","2016/11/24","2016/11/25","2016/11/26","2016/11/27","2016/11/28","2016/11/29","2016/11/30","2016/12/01"],"datatype":"Date","bind":"order"}],"fieldName":["Date"]}},"animate":{"running":false,"last":0},"config":{"value":{"fontSize":{"name":"Font Size","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":13,"category":"Global Settings","value":12},"margin":{"name":"Margin","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":10,"category":"Global Settings","min":0,"max":20,"value":10},"padding":{"name":"Padding","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":10,"category":"Global Settings","value":10},"xAxisLabel":{"name":"Label","type":[{"name":"String","default":"","level":2,"basetype":[]}],"default":"","category":"X Axis","value":""},"yAxisLabel":{"name":"Label","type":[{"name":"String","default":"","level":2,"basetype":[]}],"default":"","category":"Y Axis","value":""},"nodeShow":{"name":"Show Data Dot","type":[{"name":"Boolean","default":true,"level":8,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"default":true,"category":"Dot","value":true},"stroke":{"name":"Line Color","type":[{"name":"Color","level":10,"default":"#dc4521","Gray":"#cccccc","Positive":"#3f7ab5","Negative":"#d93510","Neutral":"#cccccc","Empty":"#ffffff","subtype":{"negative":"negative","positive":"positive","neutral":"neutral"}}],"desc":"Stroke Color","default":"#999","category":"Global Settings","value":"#8c8686"},"start":{"name":"Start Node","type":[{"name":"Color","level":10,"default":"#dc4521","Gray":"#cccccc","Positive":"#3f7ab5","Negative":"#d93510","Neutral":"#cccccc","Empty":"#ffffff","subtype":{"negative":"negative","positive":"positive","neutral":"neutral"}}],"default":"#ee4422","value":"#f94747"},"other":{"name":"Middle Nodes","type":[{"name":"Color","level":10,"default":"#dc4521","Gray":"#cccccc","Positive":"#3f7ab5","Negative":"#d93510","Neutral":"#cccccc","Empty":"#ffffff","subtype":{"negative":"negative","positive":"positive","neutral":"neutral"}}],"default":"#dddddd","value":"#dddddd"},"end":{"name":"End Node","type":[{"name":"Color","level":10,"default":"#dc4521","Gray":"#cccccc","Positive":"#3f7ab5","Negative":"#d93510","Neutral":"#cccccc","Empty":"#ffffff","subtype":{"negative":"negative","positive":"positive","neutral":"neutral"}}],"default":"#999999","value":"#999999"}},"group":{"Global Settings":{"fontSize":{"name":"Font Size","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":13,"category":"Global Settings","value":12},"margin":{"name":"Margin","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":10,"category":"Global Settings","min":0,"max":20,"value":10},"padding":{"name":"Padding","type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"default":10,"category":"Global Settings","value":10},"stroke":{"name":"Line Color","type":[{"name":"Color","level":10,"default":"#dc4521","Gray":"#cccccc","Positive":"#3f7ab5","Negative":"#d93510","Neutral":"#cccccc","Empty":"#ffffff","subtype":{"negative":"negative","positive":"positive","neutral":"neutral"}}],"desc":"Stroke Color","default":"#999","category":"Global Settings","value":"#8c8686"}},"X Axis":{"xAxisLabel":{"name":"Label","type":[{"name":"String","default":"","level":2,"basetype":[]}],"default":"","category":"X Axis","value":""}},"Y Axis":{"yAxisLabel":{"name":"Label","type":[{"name":"String","default":"","level":2,"basetype":[]}],"default":"","category":"Y Axis","value":""}},"Dot":{"nodeShow":{"name":"Show Data Dot","type":[{"name":"Boolean","default":true,"level":8,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"default":true,"category":"Dot","value":true}},"Other":{"start":{"name":"Start Node","type":[{"name":"Color","level":10,"default":"#dc4521","Gray":"#cccccc","Positive":"#3f7ab5","Negative":"#d93510","Neutral":"#cccccc","Empty":"#ffffff","subtype":{"negative":"negative","positive":"positive","neutral":"neutral"}}],"default":"#ee4422","value":"#f94747"},"other":{"name":"Middle Nodes","type":[{"name":"Color","level":10,"default":"#dc4521","Gray":"#cccccc","Positive":"#3f7ab5","Negative":"#d93510","Neutral":"#cccccc","Empty":"#ffffff","subtype":{"negative":"negative","positive":"positive","neutral":"neutral"}}],"default":"#dddddd","value":"#dddddd"},"end":{"name":"End Node","type":[{"name":"Color","level":10,"default":"#dc4521","Gray":"#cccccc","Positive":"#3f7ab5","Negative":"#d93510","Neutral":"#cccccc","Empty":"#ffffff","subtype":{"negative":"negative","positive":"positive","neutral":"neutral"}}],"default":"#999999","value":"#999999"}}}},"data":{"data":[{"name":"Value","data":[-98.87915141283355,-37.378389819662985,-3.7544274287366965,84.15944684993657,85.40286525763901,9.033910558604902,-75.43867417492537,-97.09640317132879,-29.676672837699044,-2.02934164281365,79.7146832149493,89.84913311644637,11.713246490090146,-83.06247459512431,-98.89821037476622,-28.59564438517165,-2.4030391484502136,78.29084281691546,87.94218282687875,13.143945982408656,-75.89055625258516,-96.78029901274189,-28.65139807180799,-0.8878075190974286,77.63922565844877,84.89816522335433,13.101708147373687,-85.16380548649481,-97.89387751246004,-26.42351185292428,1.2052653850255357,82.62656665176046,95.43282459858928,11.388710498357048,-77.19085890855743,-89.49327057511567,-23.609822639050506,-1.0912769459455518,81.81990849885909,90.4813864523443,14.388383125716201,-68.50417533945915,-90.95880104637591,-30.408500025711025,-1.306366809665367,84.5486952117865,92.94833293428012,19.272882408829282,-71.14280382560922,-94.9195622847066,-29.759744566425596,2.0755218791962537,83.86072804317561,89.67437232245034,16.50804082368476,-71.14043476198526,-95.67066358349363,-25.54869396595017,4.910803288893197,92.9243021244047,106.75156854135706,29.65877772726982,-61.191398548144,-85.04333239216528,-14.483931071744419,8.23097943855121,91.96787256126014,105.25910593191743,23.442568415522384,-62.37442699934384,-79.43601600505092,-20.5165148403852,9.05559170340992,91.39587281846181,101.60351373430144,27.831149029761214,-62.49786436694061,-81.35162771998256,-12.959410406087162,14.052166655926296,96.01279647994755,103.01745350994437,21.56276867054209,-65.23650970002312,-88.14068250873132,-13.778129632953828,12.334841604045447,98.25362243786046,102.75544387243635,22.54416912447191,-63.07199208575753,-82.52110563694282,-11.306427249489278,19.02693281380086,101.66060391457937,106.67521710048618,30.76370836797968,-59.24674822040308,-85.80439447206544,-16.43698234505129,13.994280965391019,96.59310563475412,104.51427896561175,28.290075035935526,-63.54277726139442,-80.54779070346044,-15.676849341991765,19.83868621252886,94.63881316238648,105.21013563187675,27.420202111964237,-64.96919630155574,-79.44181979652453,-12.62897400021006,12.954961135992306,98.51136630638428,101.62978443506677,31.06019065557231,-59.50307271488309,-79.4468214263631,-15.734649629353646,10.076701466080763,93.45518114448856,100.42885624836227,26.806567955907852,-68.8438871921881,-87.24185373465852,-14.16899355537906,4.568517100008967,88.49563115021688,102.78359812511067,19.69000798775535,-70.4772841452595,-86.95954622788452,-17.684321043415576,9.508938605610902,88.55361787985717,101.4693486291504,19.715000604650292,-62.49890195943185,-89.69936453218749,-18.009063156652488,5.386695468655428,89.2287769585856,102.5538211070951,23.235779234035167,-69.91164646837922,-81.83728773407267,-17.304430297659977,13.71555652666233,90.37701104158245,92.33519841820896,9.061347275635626,-71.69457931994228,-92.8597776200015,-23.6991974646904,-2.5973344702220786,88.42818636203725,89.52257881823594,9.021171075519396,-80.19861586946955,-100.98584570985903,-24.462990481240325,3.5652924481000543,80.59562090351314,88.1205746629079,15.32914264607015,-75.0499367128974,-93.03512711273775,-28.699393796879253,-4.000976498843665,78.74218322349425,90.8078767565878,9.638702712830323,-80.77775961368556,-97.10004779472276,-29.51747616210398,-3.139231272971221,82.81293981513377,87.73890591048855,16.398461366755463,-80.78931086624448],"datatype":"Number","bind":"value"},{"name":"Date","data":["2016/06/03","2016/06/04","2016/06/05","2016/06/06","2016/06/07","2016/06/08","2016/06/09","2016/06/10","2016/06/11","2016/06/12","2016/06/13","2016/06/14","2016/06/15","2016/06/16","2016/06/17","2016/06/18","2016/06/19","2016/06/20","2016/06/21","2016/06/22","2016/06/23","2016/06/24","2016/06/25","2016/06/26","2016/06/27","2016/06/28","2016/06/29","2016/06/30","2016/07/01","2016/07/02","2016/07/03","2016/07/04","2016/07/05","2016/07/06","2016/07/07","2016/07/08","2016/07/09","2016/07/10","2016/07/11","2016/07/12","2016/07/13","2016/07/14","2016/07/15","2016/07/16","2016/07/17","2016/07/18","2016/07/19","2016/07/20","2016/07/21","2016/07/22","2016/07/23","2016/07/24","2016/07/25","2016/07/26","2016/07/27","2016/07/28","2016/07/29","2016/07/30","2016/07/31","2016/08/01","2016/08/02","2016/08/03","2016/08/04","2016/08/05","2016/08/06","2016/08/07","2016/08/08","2016/08/09","2016/08/10","2016/08/11","2016/08/12","2016/08/13","2016/08/14","2016/08/15","2016/08/16","2016/08/17","2016/08/18","2016/08/19","2016/08/20","2016/08/21","2016/08/22","2016/08/23","2016/08/24","2016/08/25","2016/08/26","2016/08/27","2016/08/28","2016/08/29","2016/08/30","2016/08/31","2016/09/01","2016/09/02","2016/09/03","2016/09/04","2016/09/05","2016/09/06","2016/09/07","2016/09/08","2016/09/09","2016/09/10","2016/09/11","2016/09/12","2016/09/13","2016/09/14","2016/09/15","2016/09/16","2016/09/17","2016/09/18","2016/09/19","2016/09/20","2016/09/21","2016/09/22","2016/09/23","2016/09/24","2016/09/25","2016/09/26","2016/09/27","2016/09/28","2016/09/29","2016/09/30","2016/10/01","2016/10/02","2016/10/03","2016/10/04","2016/10/05","2016/10/06","2016/10/07","2016/10/08","2016/10/09","2016/10/10","2016/10/11","2016/10/12","2016/10/13","2016/10/14","2016/10/15","2016/10/16","2016/10/17","2016/10/18","2016/10/19","2016/10/20","2016/10/21","2016/10/22","2016/10/23","2016/10/24","2016/10/25","2016/10/26","2016/10/27","2016/10/28","2016/10/29","2016/10/30","2016/10/31","2016/11/01","2016/11/02","2016/11/03","2016/11/04","2016/11/05","2016/11/06","2016/11/07","2016/11/08","2016/11/09","2016/11/10","2016/11/11","2016/11/12","2016/11/13","2016/11/14","2016/11/15","2016/11/16","2016/11/17","2016/11/18","2016/11/19","2016/11/20","2016/11/21","2016/11/22","2016/11/23","2016/11/24","2016/11/25","2016/11/26","2016/11/27","2016/11/28","2016/11/29","2016/11/30","2016/12/01"],"datatype":"Date","bind":"order"}]},"library":{"hash":{"d3/3.5.12/min":"blob:https://plotdb.com/87b46eac-9188-40ba-a6e8-4997baa47038","plotd3/0.1.0":"blob:https://plotdb.com/fd1be1d9-0620-49cb-830a-9972e77e42ac","moment/2.14.1":"blob:https://plotdb.com/c42e8f97-ce10-4ba0-a76b-6a852818feb7"}},"promise":{"sample":null}}